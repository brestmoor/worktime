{"version":3,"sources":["break-picker/BreakPicker.js","picker/Picker.js","break-output/BreakOutput.js","break-calculator/BreakCalculator.js","App.js","serviceWorker.js","index.js"],"names":["BreakPicker","_ref","onChange","value","react_default","a","createElement","className","type","event","target","Picker","entry_default","BreakOutput","timeDiff","BreakCalculator","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","startTime","timeString","endTime","Date","getHours","Math","floor","getMinutes","breakTime","onStartTimeChosen","bind","assertThisInitialized","onEndTimeChosen","onBreakTimeChosen","calculateDiff","startDate","setHours","split","setMinutes","endDate","diffDate","getTime","setState","expandToTwoDigits","hour","minute","time","toString","length","style","width","paddingTop","picker_Picker","src_break_picker_BreakPicker","Button","bsStyle","onClick","src_break_output_BreakOutput","Component","App","src_break_calculator_BreakCalculator","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4fa2509b.chunk.js","sourcesContent":["import React from 'react';\r\nimport './BreakPicker.css'\r\n\r\nconst BreakPicker = ({onChange, value}) => {\r\n    return (\r\n        <div>\r\n            <div className=\"basic-time-container break-picker\">\r\n                <input className=\"break-input\" type=\"number\" onChange={(event) => onChange(event.target.value)} value={value}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BreakPicker;","import React from 'react';\r\nimport TimePicker from \"react-time-picker\";\r\n\r\nconst Picker = ({onChange, value}) => {\r\n    return (\r\n        <div>\r\n            <div className=\"basic-time-container\">\r\n                <TimePicker\r\n                    onChange={onChange}\r\n                    value={value}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Picker;","import React from 'react';\r\nimport './BreakOutput.css'\r\n\r\nconst BreakOutput = ({timeDiff}) => {\r\n    return (\r\n        <div className=\"break-output\">\r\n            {timeDiff}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BreakOutput","import React, {Component} from 'react';\r\nimport BreakPicker from \"../break-picker/BreakPicker\";\r\nimport Picker from \"../picker/Picker\";\r\nimport BreakOutput from \"../break-output/BreakOutput\";\r\nimport {Button} from \"react-bootstrap\";\r\nimport './BreakCalculator.css';\r\n\r\nclass BreakCalculator extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.onStartTimeChosen = this.onStartTimeChosen.bind(this);\r\n        this.onEndTimeChosen = this.onEndTimeChosen.bind(this);\r\n        this.onBreakTimeChosen = this.onBreakTimeChosen.bind(this);\r\n        this.calculateDiff = this.calculateDiff.bind(this);\r\n    }\r\n\r\n    state = {\r\n        startTime:  this.timeString('09', '00'),\r\n        endTime: this.timeString(new Date().getHours(), Math.floor(new Date().getMinutes() / 5) * 5),\r\n        breakTime: 0,\r\n        timeDiff: ''\r\n    };\r\n\r\n    calculateDiff() {\r\n        const startTime = this.state.startTime;\r\n        const endTime = this.state.endTime;\r\n        const breakTime = this.state.breakTime;\r\n\r\n        if (startTime && endTime) {\r\n            const startDate = new Date();\r\n            startDate.setHours(startTime.split(':')[0]);\r\n            startDate.setMinutes(startTime.split(':')[1]);\r\n\r\n            const endDate = new Date();\r\n            endDate.setHours(endTime.split(':')[0]);\r\n            endDate.setMinutes(endTime.split(':')[1]);\r\n\r\n            const diffDate = new Date(endDate.getTime() - startDate.getTime());\r\n            diffDate.setMinutes(diffDate.getMinutes() - breakTime);\r\n            this.setState({timeDiff: this.expandToTwoDigits(diffDate.getHours() - 1) + ':' + this.expandToTwoDigits(diffDate.getMinutes())})\r\n        }\r\n    }\r\n\r\n    timeString(hour, minute) {\r\n        return this.expandToTwoDigits(hour)+ ':' + this.expandToTwoDigits(minute)\r\n    }\r\n\r\n    expandToTwoDigits(time) {\r\n        return time.toString().length === 1 ?  '0' + time : time;\r\n    }\r\n\r\n    onStartTimeChosen(time) {\r\n        this.setState({startTime: time})\r\n    }\r\n\r\n    onEndTimeChosen(time) {\r\n        this.setState({endTime: time})\r\n    }\r\n\r\n    onBreakTimeChosen(time) {\r\n        this.setState({breakTime: time})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={{width: 170, paddingTop: 100}}>\r\n                <Picker value={this.state.startTime} onChange={this.onStartTimeChosen}/>\r\n                <BreakPicker value={this.state.breakTime} onChange={this.onBreakTimeChosen}/>\r\n                <Picker value={this.state.endTime} onChange={this.onEndTimeChosen}/>\r\n                <div className=\"submit-button-container\">\r\n                    <Button className=\"submit-button\" bsStyle=\"default\" onClick={this.calculateDiff}>calculate</Button>\r\n                </div>\r\n                <BreakOutput timeDiff={this.state.timeDiff} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BreakCalculator;","import React, {Component} from 'react';\nimport './App.css';\nimport BreakCalculator from \"./break-calculator/BreakCalculator\";\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <BreakCalculator/>\n                </header>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.css'\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}